{"version":3,"file":"dateUtil.js","sourceRoot":"","sources":["../../../src/lib/datepicker/dateUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class Md2DateUtil {\n  /**\n   * Gets the first day of the month for the given date's month.\n   * @param {Date} date\n   * @returns {Date}\n   */\n  getFirstDateOfMonth(date: Date) {\n    return new Date(date.getFullYear(), date.getMonth(), 1, date.getHours(), date.getMinutes());\n  }\n\n  /**\n   * Gets the number of days in the month for the given date's month.\n   * @param date\n   * @returns {number}\n   */\n  getNumberOfDaysInMonth(date: Date) {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n  }\n\n  /**\n   * Get an arbitrary date in the month after the given date's month.\n   * @param date\n   * @returns {Date}\n   */\n  getDateInNextMonth(date: Date) {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 1,\n      date.getHours(), date.getMinutes());\n  }\n\n  /**\n   * Get an arbitrary date in the month before the given date's month.\n   * @param date\n   * @returns {Date}\n   */\n  getDateInPreviousMonth(date: Date) {\n    return new Date(date.getFullYear(), date.getMonth() - 1, 1,\n      date.getHours(), date.getMinutes());\n  }\n\n  /**\n   * Gets whether two dates have the same month and year.\n   * @param {Date} d1\n   * @param {Date} d2\n   * @returns {boolean}\n   */\n  isSameMonthAndYear(d1: Date, d2: Date) {\n    return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth();\n  }\n\n  /**\n   * Gets whether two dates are the same day (not not necesarily the same time).\n   * @param {Date} d1\n   * @param {Date} d2\n   * @returns {boolean}\n   */\n  isSameDay(d1: Date, d2: Date) {\n    return d1.getDate() == d2.getDate() && this.isSameMonthAndYear(d1, d2);\n  }\n\n  /**\n   * Gets whether a date is in the month immediately after some date.\n   * @param {Date} startDate The date from which to compare.\n   * @param {Date} endDate The date to check.\n   * @returns {boolean}\n   */\n  isInNextMonth(startDate: Date, endDate: Date) {\n    let nextMonth = this.getDateInNextMonth(startDate);\n    return this.isSameMonthAndYear(nextMonth, endDate);\n  }\n\n  /**\n   * Gets whether a date is in the month immediately before some date.\n   * @param {Date} startDate The date from which to compare.\n   * @param {Date} endDate The date to check.\n   * @returns {boolean}\n   */\n  isInPreviousMonth(startDate: Date, endDate: Date) {\n    let previousMonth = this.getDateInPreviousMonth(startDate);\n    return this.isSameMonthAndYear(endDate, previousMonth);\n  }\n\n  /**\n   * Gets the midpoint between two dates.\n   * @param {Date} d1\n   * @param {Date} d2\n   * @returns {Date}\n   */\n  getDateMidpoint(d1: Date, d2: Date) {\n    return this.createDateAtMidnight((d1.getTime() + d2.getTime()) / 2);\n  }\n\n  /**\n   * Gets the week of the month that a given date occurs in.\n   * @param {Date} date\n   * @returns {number} Index of the week of the month (zero-based).\n   */\n  getWeekOfMonth(date: Date) {\n    let firstDayOfMonth = this.getFirstDateOfMonth(date);\n    return Math.floor((firstDayOfMonth.getDay() + date.getDate() - 1) / 7);\n  }\n\n  /**\n   * Gets a new date incremented by the given number of minutes. Number of minutes can be negative.\n   * @param {Date} date\n   * @param {number} numberOfMinutes\n   * @returns {Date}\n   */\n  incrementMinutes(date: Date, numberOfMinutes: number) {\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate(),\n      date.getHours(), date.getMinutes() + numberOfMinutes);\n  }\n\n  /**\n   * Gets a new date incremented by the given number of hours. Number of hours can be negative.\n   * @param {Date} date\n   * @param {number} numberOfHours\n   * @returns {Date}\n   */\n  incrementHours(date: Date, numberOfHours: number) {\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate(),\n      date.getHours() + numberOfHours, date.getMinutes());\n  }\n\n  /**\n   * Gets a new date incremented by the given number of days. Number of days can be negative.\n   * @param {Date} date\n   * @param {number} numberOfDays\n   * @returns {Date}\n   */\n  incrementDays(date: Date, numberOfDays: number) {\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate() + numberOfDays,\n      date.getHours(), date.getMinutes());\n  }\n\n  /**\n   * Gets a new date incremented by the given number of months. Number of months can be negative.\n   * If the date of the given month does not match the target month, the date will be set to the\n   * last day of the month.\n   * @param {Date} date\n   * @param {number} numberOfMonths\n   * @returns {Date}\n   */\n  incrementMonths(date: Date, numberOfMonths: number) {\n    // If the same date in the target month does not actually exist, the Date object will\n    // automatically advance *another* month by the number of missing days.\n    // For example, if you try to go from Jan. 30 to Feb. 30, you'll end up on March 2.\n    // So, we check if the month overflowed and go to the last day of the target month instead.\n    let dateInTargetMonth = new Date(date.getFullYear(), date.getMonth() + numberOfMonths, 1,\n      date.getHours(), date.getMinutes());\n    let numberOfDaysInMonth = this.getNumberOfDaysInMonth(dateInTargetMonth);\n    if (numberOfDaysInMonth < date.getDate()) {\n      dateInTargetMonth.setDate(numberOfDaysInMonth);\n    } else {\n      dateInTargetMonth.setDate(date.getDate());\n    }\n\n    return dateInTargetMonth;\n  }\n\n  /**\n   * Get the integer distance between two months. This *only* considers the month and year\n   * portion of the Date instances.\n   *\n   * @param {Date} start\n   * @param {Date} end\n   * @returns {number} Number of months between `start` and `end`. If `end` is before `start`\n   *     chronologically, this number will be negative.\n   */\n  getMonthDistance(start: Date, end: Date) {\n    return (12 * (end.getFullYear() - start.getFullYear())) + (end.getMonth() - start.getMonth());\n  }\n\n  /**\n   * Gets the last day of the month for the given date.\n   * @param {Date} date\n   * @returns {Date}\n   */\n  getLastDateOfMonth(date: Date) {\n    return new Date(date.getFullYear(), date.getMonth(), this.getNumberOfDaysInMonth(date),\n      date.getHours(), date.getMinutes());\n  }\n\n  /**\n   * Checks whether a date is valid.\n   * @param {Date} date\n   * @return {boolean} Whether the date is a valid Date.\n   */\n  isValidDate(date: Date) {\n    return date != null && date.getTime && !isNaN(date.getTime());\n  }\n\n  /**\n   * Sets a date's time to midnight.\n   * @param {Date} date\n   */\n  setDateTimeToMidnight(date: Date) {\n    if (this.isValidDate(date)) {\n      date.setHours(0, 0, 0, 0);\n    }\n  }\n\n  /**\n   * Creates a date with the time set to midnight.\n   * Drop-in replacement for two forms of the Date constructor:\n   * 1. No argument for Date representing now.\n   * 2. Single-argument value representing number of seconds since Unix Epoch\n   * or a Date object.\n   * @param {number|Date=} value\n   * @return {Date} New date with time set to midnight.\n   */\n  createDateAtMidnight(value: any) {\n    let date: Date;\n    if (!value) {\n      date = new Date();\n    } else {\n      date = new Date(value);\n    }\n    this.setDateTimeToMidnight(date);\n    return date;\n  }\n\n  /**\n   * Checks if a date is within a min and max range, ignoring the time component.\n   * If minDate or maxDate are not dates, they are ignored.\n   * @param {Date} date\n   * @param {Date} minDate\n   * @param {Date} maxDate\n   */\n  isDateWithinRange(date: Date, minDate: Date, maxDate: Date) {\n    let dateAtMidnight = this.createDateAtMidnight(date);\n    let minDateAtMidnight = this.isValidDate(minDate) ? this.createDateAtMidnight(minDate) : null;\n    let maxDateAtMidnight = this.isValidDate(maxDate) ? this.createDateAtMidnight(maxDate) : null;\n    return (!minDateAtMidnight || minDateAtMidnight <= dateAtMidnight) &&\n      (!maxDateAtMidnight || maxDateAtMidnight >= dateAtMidnight);\n  }\n\n  /**\n   * Gets a new date incremented by the given number of years. Number of years can be negative.\n   * See `incrementMonths` for notes on overflow for specific dates.\n   * @param {Date} date\n   * @param {number} numberOfYears\n   * @returns {Date}\n   */\n  incrementYears(date: Date, numberOfYears: number) {\n    return this.incrementMonths(date, numberOfYears * 12);\n  }\n\n  /**\n   * Get the integer distance between two years. This *only* considers the year portion of the\n   * Date instances.\n   *\n   * @param {Date} start\n   * @param {Date} end\n   * @returns {number} Number of months between `start` and `end`. If `end` is before `start`\n   *     chronologically, this number will be negative.\n   */\n  getYearDistance(start: Date, end: Date) {\n    return end.getFullYear() - start.getFullYear();\n  }\n\n  /**\n   * Clamps a date between a minimum and a maximum date.\n   * @param {Date} date Date to be clamped\n   * @param {Date=} minDate Minimum date\n   * @param {Date=} maxDate Maximum date\n   * @return {Date}\n   */\n  clampDate(date: Date, minDate: Date, maxDate: Date) {\n    let boundDate = date;\n    if (minDate && date < minDate) {\n      boundDate = new Date(minDate.getTime());\n    }\n    if (maxDate && date > maxDate) {\n      boundDate = new Date(maxDate.getTime());\n    }\n    return boundDate;\n  }\n\n  /**\n   * Extracts and parses the timestamp from a DOM node.\n   * @param  {HTMLElement} node Node from which the timestamp will be extracted.\n   * @return {number} Time since epoch.\n   */\n  getTimestampFromNode(node: any) {\n    if (node && node.hasAttribute('data-timestamp')) {\n      return Number(node.getAttribute('data-timestamp'));\n    }\n  }\n\n  /**\n   * Checks if a month is within a min and max range, ignoring the date and time components.\n   * If minDate or maxDate are not dates, they are ignored.\n   * @param {Date} date\n   * @param {Date} minDate\n   * @param {Date} maxDate\n   */\n  isMonthWithinRange(date: Date, minDate: Date, maxDate: Date) {\n    let month = date.getMonth();\n    let year = date.getFullYear();\n\n    return (!minDate || minDate.getFullYear() < year || minDate.getMonth() <= month) &&\n      (!maxDate || maxDate.getFullYear() > year || maxDate.getMonth() >= month);\n  }\n}\n"]}